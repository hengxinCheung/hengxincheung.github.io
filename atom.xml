<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>hengxincheung&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://hengxincheung.github.io/"/>
  <updated>2020-07-03T13:31:40.550Z</updated>
  <id>https://hengxincheung.github.io/</id>
  
  <author>
    <name>hengxincheung</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>21-并发</title>
    <link href="https://hengxincheung.github.io/Java%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/21-%E5%B9%B6%E5%8F%91/"/>
    <id>https://hengxincheung.github.io/Java%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/21-%E5%B9%B6%E5%8F%91/</id>
    <published>2020-07-03T13:31:04.000Z</published>
    <updated>2020-07-03T13:31:40.550Z</updated>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Fri Jul 03 2020 21:34:20 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;编程问题相当打的一部分都可以通过使用 &lt;strong&gt;顺序编程&lt;/strong&gt; 来解决。然而，如果能够并行地执行程序中的多个部分，则会变得非常
      
    
    </summary>
    
    
      <category term="Java编程思想" scheme="https://hengxincheung.github.io/categories/Java%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/"/>
    
    
      <category term="Java" scheme="https://hengxincheung.github.io/tags/Java/"/>
    
      <category term="编程思想" scheme="https://hengxincheung.github.io/tags/%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>20-注解</title>
    <link href="https://hengxincheung.github.io/Java%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/20-%E6%B3%A8%E8%A7%A3/"/>
    <id>https://hengxincheung.github.io/Java%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/20-%E6%B3%A8%E8%A7%A3/</id>
    <published>2020-07-03T13:30:32.000Z</published>
    <updated>2020-07-03T13:31:34.942Z</updated>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Fri Jul 03 2020 21:34:19 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;&lt;strong&gt;注解（也被称为元数据）为我们在代码中添加信息提供了一种形式化的方法，使我们可以在稍后某个时刻非常方便使用这些数据。&lt;/stron
      
    
    </summary>
    
    
      <category term="Java编程思想" scheme="https://hengxincheung.github.io/categories/Java%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/"/>
    
    
      <category term="Java" scheme="https://hengxincheung.github.io/tags/Java/"/>
    
      <category term="编程思想" scheme="https://hengxincheung.github.io/tags/%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>19-枚举类型</title>
    <link href="https://hengxincheung.github.io/Java%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/19-%E6%9E%9A%E4%B8%BE%E7%B1%BB%E5%9E%8B/"/>
    <id>https://hengxincheung.github.io/Java%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/19-%E6%9E%9A%E4%B8%BE%E7%B1%BB%E5%9E%8B/</id>
    <published>2020-07-03T13:29:52.000Z</published>
    <updated>2020-07-03T13:31:30.708Z</updated>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Fri Jul 03 2020 21:34:19 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;&lt;strong&gt;关键字 &lt;code&gt;enum&lt;/code&gt; 可以将一组具名的值的有限集合创建为一种新的类型，而这些具名的值可以作为常规的程序组件
      
    
    </summary>
    
    
      <category term="Java编程思想" scheme="https://hengxincheung.github.io/categories/Java%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/"/>
    
    
      <category term="Java" scheme="https://hengxincheung.github.io/tags/Java/"/>
    
      <category term="编程思想" scheme="https://hengxincheung.github.io/tags/%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>18-IO系统</title>
    <link href="https://hengxincheung.github.io/Java%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/18-IO%E7%B3%BB%E7%BB%9F/"/>
    <id>https://hengxincheung.github.io/Java%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/18-IO%E7%B3%BB%E7%BB%9F/</id>
    <published>2020-07-03T13:29:07.000Z</published>
    <updated>2020-07-03T13:31:24.106Z</updated>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Fri Jul 03 2020 21:34:19 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;&lt;strong&gt;对程序语言的设计者来说，创建一个好的输入/输出（I/O）系统是一项艰难的任务。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;挑战来自于要涵盖所
      
    
    </summary>
    
    
      <category term="Java编程思想" scheme="https://hengxincheung.github.io/categories/Java%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/"/>
    
    
      <category term="Java" scheme="https://hengxincheung.github.io/tags/Java/"/>
    
      <category term="编程思想" scheme="https://hengxincheung.github.io/tags/%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>17-容器深入研究</title>
    <link href="https://hengxincheung.github.io/Java%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/17-%E5%AE%B9%E5%99%A8%E6%B7%B1%E5%85%A5%E7%A0%94%E7%A9%B6/"/>
    <id>https://hengxincheung.github.io/Java%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/17-%E5%AE%B9%E5%99%A8%E6%B7%B1%E5%85%A5%E7%A0%94%E7%A9%B6/</id>
    <published>2020-06-21T15:20:01.000Z</published>
    <updated>2020-06-21T15:20:14.559Z</updated>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Fri Jul 03 2020 21:34:19 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;完整的容器分类法&quot;&gt;&lt;a href=&quot;#完整的容器分类法&quot; class=&quot;headerlink&quot; title=&quot;完整的容器分类法&quot;&gt;&lt;
      
    
    </summary>
    
    
      <category term="Java编程思想" scheme="https://hengxincheung.github.io/categories/Java%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/"/>
    
    
      <category term="Java" scheme="https://hengxincheung.github.io/tags/Java/"/>
    
      <category term="编程思想" scheme="https://hengxincheung.github.io/tags/%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>16-数组</title>
    <link href="https://hengxincheung.github.io/Java%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/16-%E6%95%B0%E7%BB%84/"/>
    <id>https://hengxincheung.github.io/Java%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/16-%E6%95%B0%E7%BB%84/</id>
    <published>2020-06-21T15:19:04.000Z</published>
    <updated>2020-06-21T15:19:28.673Z</updated>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Fri Jul 03 2020 21:34:19 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;对数据的基本看法是，你可以创建并组装它们，通过使用整型索引值访问它们的元素，并且它们的尺寸不能改变。&lt;/p&gt;&lt;h2 id=&quot;数组为什么特殊&quot;&gt;&lt;
      
    
    </summary>
    
    
      <category term="Java编程思想" scheme="https://hengxincheung.github.io/categories/Java%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/"/>
    
    
      <category term="Java" scheme="https://hengxincheung.github.io/tags/Java/"/>
    
      <category term="编程思想" scheme="https://hengxincheung.github.io/tags/%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>15-泛型</title>
    <link href="https://hengxincheung.github.io/Java%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/15-%E6%B3%9B%E5%9E%8B/"/>
    <id>https://hengxincheung.github.io/Java%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/15-%E6%B3%9B%E5%9E%8B/</id>
    <published>2020-06-21T15:18:16.000Z</published>
    <updated>2020-06-21T15:19:30.470Z</updated>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Fri Jul 03 2020 21:34:19 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;&lt;strong&gt;一般的类和方法，只能使用具体的类型：要么是基本类型，要么是自定义的类。如果要编写可以应用于多种类型的代码，这种刻板的限制对代码的
      
    
    </summary>
    
    
      <category term="Java编程思想" scheme="https://hengxincheung.github.io/categories/Java%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/"/>
    
    
      <category term="Java" scheme="https://hengxincheung.github.io/tags/Java/"/>
    
      <category term="编程思想" scheme="https://hengxincheung.github.io/tags/%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>14-类型信息</title>
    <link href="https://hengxincheung.github.io/Java%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/14-%E7%B1%BB%E5%9E%8B%E4%BF%A1%E6%81%AF/"/>
    <id>https://hengxincheung.github.io/Java%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/14-%E7%B1%BB%E5%9E%8B%E4%BF%A1%E6%81%AF/</id>
    <published>2020-06-16T16:16:35.000Z</published>
    <updated>2020-06-16T16:16:50.425Z</updated>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Fri Jul 03 2020 21:34:19 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;&lt;strong&gt;运行时类型信息使得你可以在程序运行时发现和使用类型信息。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Java主要有两种方式让我们在运行时识别
      
    
    </summary>
    
    
      <category term="Java编程思想" scheme="https://hengxincheung.github.io/categories/Java%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/"/>
    
    
      <category term="Java" scheme="https://hengxincheung.github.io/tags/Java/"/>
    
      <category term="编程思想" scheme="https://hengxincheung.github.io/tags/%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>13-字符串</title>
    <link href="https://hengxincheung.github.io/Java%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/13-%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>https://hengxincheung.github.io/Java%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/13-%E5%AD%97%E7%AC%A6%E4%B8%B2/</id>
    <published>2020-06-15T16:40:26.000Z</published>
    <updated>2020-06-15T16:40:49.467Z</updated>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Fri Jul 03 2020 21:34:19 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;&lt;strong&gt;字符串操作是计算机程序中最常见的行为。&lt;/strong&gt;&lt;/p&gt;&lt;h2 id=&quot;不可变-String&quot;&gt;&lt;a href=&quot;#不可
      
    
    </summary>
    
    
      <category term="Java编程思想" scheme="https://hengxincheung.github.io/categories/Java%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/"/>
    
    
      <category term="Java" scheme="https://hengxincheung.github.io/tags/Java/"/>
    
      <category term="编程思想" scheme="https://hengxincheung.github.io/tags/%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>12-异常</title>
    <link href="https://hengxincheung.github.io/Java%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/12-%E5%BC%82%E5%B8%B8/"/>
    <id>https://hengxincheung.github.io/Java%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/12-%E5%BC%82%E5%B8%B8/</id>
    <published>2020-06-15T16:38:07.000Z</published>
    <updated>2020-06-15T16:40:09.436Z</updated>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Fri Jul 03 2020 21:34:19 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;&lt;strong&gt;Java 的基本理念是“结构不佳的代码不能运行”。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;发现错误的理想时机是编译阶段，然而编译期间不能
      
    
    </summary>
    
    
      <category term="Java编程思想" scheme="https://hengxincheung.github.io/categories/Java%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/"/>
    
    
      <category term="Java" scheme="https://hengxincheung.github.io/tags/Java/"/>
    
      <category term="编程思想" scheme="https://hengxincheung.github.io/tags/%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>11-持有对象</title>
    <link href="https://hengxincheung.github.io/Java%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/11-%E6%8C%81%E6%9C%89%E5%AF%B9%E8%B1%A1/"/>
    <id>https://hengxincheung.github.io/Java%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/11-%E6%8C%81%E6%9C%89%E5%AF%B9%E8%B1%A1/</id>
    <published>2020-06-03T10:18:51.000Z</published>
    <updated>2020-06-09T13:21:56.415Z</updated>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Fri Jul 03 2020 21:34:19 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;通常，程序总是根据运行时才知道的某些条件去创建新的对象，即需要在任意时刻和任意位置创建任意数量的对象。所以不能依靠创建命名的引用来持有每一个对象
      
    
    </summary>
    
    
      <category term="Java编程思想" scheme="https://hengxincheung.github.io/categories/Java%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/"/>
    
    
      <category term="Java" scheme="https://hengxincheung.github.io/tags/Java/"/>
    
      <category term="编程思想" scheme="https://hengxincheung.github.io/tags/%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>10-内部类</title>
    <link href="https://hengxincheung.github.io/Java%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/10-%E5%86%85%E9%83%A8%E7%B1%BB/"/>
    <id>https://hengxincheung.github.io/Java%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/10-%E5%86%85%E9%83%A8%E7%B1%BB/</id>
    <published>2020-05-30T13:51:09.000Z</published>
    <updated>2020-05-31T16:08:13.349Z</updated>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Fri Jul 03 2020 21:34:19 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;&lt;strong&gt;可以将一个类的定义放在另一个类的定义内部，这就是内部类。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;内部类是一种非常有用的特性，因为它允许你
      
    
    </summary>
    
    
      <category term="Java编程思想" scheme="https://hengxincheung.github.io/categories/Java%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/"/>
    
    
      <category term="Java" scheme="https://hengxincheung.github.io/tags/Java/"/>
    
      <category term="编程思想" scheme="https://hengxincheung.github.io/tags/%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>09-接口</title>
    <link href="https://hengxincheung.github.io/Java%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/09-%E6%8E%A5%E5%8F%A3/"/>
    <id>https://hengxincheung.github.io/Java%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/09-%E6%8E%A5%E5%8F%A3/</id>
    <published>2020-05-30T10:55:09.000Z</published>
    <updated>2020-05-30T12:11:31.905Z</updated>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Fri Jul 03 2020 21:34:19 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;&lt;strong&gt;接口和内部类为我们提供了一种将接口与实现分离的更加结构化的方法。&lt;/strong&gt;&lt;/p&gt;&lt;h2 id=&quot;抽象类与抽象方法&quot;&gt;&lt;
      
    
    </summary>
    
    
      <category term="Java编程思想" scheme="https://hengxincheung.github.io/categories/Java%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/"/>
    
    
      <category term="Java" scheme="https://hengxincheung.github.io/tags/Java/"/>
    
      <category term="编程思想" scheme="https://hengxincheung.github.io/tags/%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>基于URL的权限系统</title>
    <link href="https://hengxincheung.github.io/web/%E5%9F%BA%E4%BA%8EURL%E7%9A%84%E6%9D%83%E9%99%90%E7%B3%BB%E7%BB%9F/"/>
    <id>https://hengxincheung.github.io/web/%E5%9F%BA%E4%BA%8EURL%E7%9A%84%E6%9D%83%E9%99%90%E7%B3%BB%E7%BB%9F/</id>
    <published>2020-05-29T12:59:34.000Z</published>
    <updated>2020-05-30T16:17:39.816Z</updated>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Fri Jul 03 2020 21:34:20 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;figure 
      
    
    </summary>
    
    
      <category term="web" scheme="https://hengxincheung.github.io/categories/web/"/>
    
    
      <category term="权限系统" scheme="https://hengxincheung.github.io/tags/%E6%9D%83%E9%99%90%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="web" scheme="https://hengxincheung.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>一个简单的用户系统设计</title>
    <link href="https://hengxincheung.github.io/web/%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E7%94%A8%E6%88%B7%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/"/>
    <id>https://hengxincheung.github.io/web/%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E7%94%A8%E6%88%B7%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/</id>
    <published>2020-05-29T08:18:53.000Z</published>
    <updated>2020-05-29T12:48:31.838Z</updated>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Fri Jul 03 2020 21:34:20 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;用户系统是最基础的构成之一，但是越是基础越是难以设计。在设计用户系统的时候，首先想到的自建一个用户系统，劳烦用户填写资料进行注册登录。但同时还需
      
    
    </summary>
    
    
      <category term="web" scheme="https://hengxincheung.github.io/categories/web/"/>
    
    
      <category term="web" scheme="https://hengxincheung.github.io/tags/web/"/>
    
      <category term="用户系统" scheme="https://hengxincheung.github.io/tags/%E7%94%A8%E6%88%B7%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>08-多态</title>
    <link href="https://hengxincheung.github.io/Java%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/08-%E5%A4%9A%E6%80%81/"/>
    <id>https://hengxincheung.github.io/Java%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/08-%E5%A4%9A%E6%80%81/</id>
    <published>2020-05-27T12:56:56.000Z</published>
    <updated>2020-05-27T17:56:21.961Z</updated>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Fri Jul 03 2020 21:34:19 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;在面向对象的程序设计语言中，多态（也称为动态绑定，后期绑定或者运行时绑定）是继数据抽象和继承之后的第三种基本特征。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;st
      
    
    </summary>
    
    
      <category term="Java编程思想" scheme="https://hengxincheung.github.io/categories/Java%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/"/>
    
    
      <category term="Java" scheme="https://hengxincheung.github.io/tags/Java/"/>
    
      <category term="编程思想" scheme="https://hengxincheung.github.io/tags/%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>07-复用类</title>
    <link href="https://hengxincheung.github.io/Java%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/07-%E5%A4%8D%E7%94%A8%E7%B1%BB/"/>
    <id>https://hengxincheung.github.io/Java%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/07-%E5%A4%8D%E7%94%A8%E7%B1%BB/</id>
    <published>2020-05-27T11:30:44.000Z</published>
    <updated>2020-05-27T15:14:38.754Z</updated>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Fri Jul 03 2020 21:34:19 GMT+0800 (GMT+08:00) --&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;组合&lt;/strong&gt;：在新的类中产生现有类的对象。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;继承&lt;/strong&gt;：按照现有
      
    
    </summary>
    
    
      <category term="Java编程思想" scheme="https://hengxincheung.github.io/categories/Java%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/"/>
    
    
      <category term="Java" scheme="https://hengxincheung.github.io/tags/Java/"/>
    
      <category term="编程思想" scheme="https://hengxincheung.github.io/tags/%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>随机森林简述</title>
    <link href="https://hengxincheung.github.io/%E7%BB%9F%E8%AE%A1%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E9%9A%8F%E6%9C%BA%E6%A3%AE%E6%9E%97%E7%AE%80%E8%BF%B0/"/>
    <id>https://hengxincheung.github.io/%E7%BB%9F%E8%AE%A1%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E9%9A%8F%E6%9C%BA%E6%A3%AE%E6%9E%97%E7%AE%80%E8%BF%B0/</id>
    <published>2020-05-26T06:53:11.000Z</published>
    <updated>2020-05-27T07:22:46.853Z</updated>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Fri Jul 03 2020 21:34:20 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h2&gt;&lt;p&gt;&lt;stro
      
    
    </summary>
    
    
      <category term="统计机器学习" scheme="https://hengxincheung.github.io/categories/%E7%BB%9F%E8%AE%A1%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="统计机器学习" scheme="https://hengxincheung.github.io/tags/%E7%BB%9F%E8%AE%A1%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="随机森林" scheme="https://hengxincheung.github.io/tags/%E9%9A%8F%E6%9C%BA%E6%A3%AE%E6%9E%97/"/>
    
  </entry>
  
  <entry>
    <title>git命令大全</title>
    <link href="https://hengxincheung.github.io/git/git%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/"/>
    <id>https://hengxincheung.github.io/git/git%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/</id>
    <published>2020-05-26T06:51:35.000Z</published>
    <updated>2020-05-27T07:23:06.623Z</updated>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Fri Jul 03 2020 21:34:20 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;&lt;a href=&quot;https://git-scm.com/book/zh/v2&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;
      
    
    </summary>
    
    
      <category term="git" scheme="https://hengxincheung.github.io/categories/git/"/>
    
    
      <category term="git" scheme="https://hengxincheung.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>有状态和无状态登录</title>
    <link href="https://hengxincheung.github.io/web/%E6%9C%89%E7%8A%B6%E6%80%81%E5%92%8C%E6%97%A0%E7%8A%B6%E6%80%81%E7%99%BB%E5%BD%95/"/>
    <id>https://hengxincheung.github.io/web/%E6%9C%89%E7%8A%B6%E6%80%81%E5%92%8C%E6%97%A0%E7%8A%B6%E6%80%81%E7%99%BB%E5%BD%95/</id>
    <published>2020-05-26T05:23:34.000Z</published>
    <updated>2020-05-29T11:28:23.458Z</updated>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Fri Jul 03 2020 21:34:20 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;在一个系统中，用户的登录状态的维护是不可跨越的重要问题。根据&lt;strong&gt;登录状态保存在服务器端抑或客户端&lt;/strong&gt;可以将其区分为:&lt;
      
    
    </summary>
    
    
      <category term="web" scheme="https://hengxincheung.github.io/categories/web/"/>
    
    
      <category term="web" scheme="https://hengxincheung.github.io/tags/web/"/>
    
      <category term="登录" scheme="https://hengxincheung.github.io/tags/%E7%99%BB%E5%BD%95/"/>
    
  </entry>
  
</feed>
